//两数相加，链表
//
#include <iostream>
using namespace std;
void fill_arr(int*,int);
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
    };
//
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2);
};
//
class link_list{
	private:
		int nodes;
		struct ListNode * node1;
	public:
		link_list(int*,int);
		ListNode* begin();
};
//
int main(){
	int length1,length2;
	cout<<"input the length of dynamic array,arr1:"<<endl;
	cin >> length1;
	cout<<"input the length of dynamic array,arr2:"<<endl;
	cin >> length2;
	int * arr1 = new int[length1];
	int * arr2 = new int[length2];
	cout<<"input these members of the 2 arrays:"<<endl;
	cout<<"hhhhhhhhhh"<<endl;
	fill_arr(arr1,length1);
	fill_arr(arr2,length2);
	//
	link_list ll_1(arr1,length1);
	link_list ll_2(arr2,length2);
	Solution solver;
	ListNode * list_final = solver.addTwoNumbers(ll_1.begin(),ll_2.begin());
	cout << list_final->val <<endl;
	ListNode * iter = list_final->next;
	while (iter != NULL){
		cout<<iter->val<<endl;
		iter = iter->next;
	}
	return 0;
	
} 
//
void fill_arr(int* p_a,int L){
		cout<<endl<<"input "<<L<<" values."<<endl;
		for (int i =0;i<L;i++){
		int value;
		cout<<"the "<<i<<"th: ";
		cin >>value;
		p_a[i]=value;
		//
	}
}
//
ListNode* Solution::addTwoNumbers(ListNode* l1, ListNode* l2){
    int sum = l1->val + l2->val;
    int position =0;
    sum = sum+position ;
    if (sum == 10 || sum >10) {position = 1;}
    sum %= 10;
    ListNode* l3 = new ListNode(sum);
    ListNode* ptr = l3;
    ListNode* l1_c = l1->next ;
    ListNode* l2_c = l2->next;
    while (l1_c != NULL || l2_c != NULL){
        int a,b;
        (l1_c == NULL) ? a=0:a=(l1_c->val);
        (l2_c == NULL) ? b=0:b=(l2_c->val);
        sum = a + b +position;
        position =0;
        if (sum == 10 || sum >10) {position = 1;}
        sum = sum%10 ;
        ListNode* t_ptr = new ListNode(sum);
        ptr->next = t_ptr;
        ptr=t_ptr; 
        (l1_c == NULL) ? l1_c=NULL :l1_c = l1_c->next ;
        (l2_c == NULL) ? l2_c=NULL :l2_c = l2_c->next;        
    }
    if (position==1){
        ptr->next = new ListNode(1);
    }
    return l3;
}
//
link_list::link_list(int * arr_ptr,int L){
	nodes = L;
	node1 = new ListNode(*arr_ptr);//此处注意修改，在类声明中定义 
	if (L>1){
		ListNode* next_n = node1;
		for (int i=1;i<L;i++){
			ListNode* t_tpr = new ListNode(arr_ptr[i]);
			next_n->next = t_tpr;
			next_n = t_tpr;
		}
	}	 
}
//
ListNode* link_list::begin(){
	return node1;
}
